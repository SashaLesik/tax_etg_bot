import logging
import os
import telebot
from telebot import types
from dotenv import load_dotenv
import requests
from decimal import Decimal, getcontext

getcontext().prec = 7

load_dotenv()

#logging.basicConfig(filename='bot.log', level=logging.INFO)
logging.basicConfig(level=logging.INFO)

APY_KEY = os.getenv('APY_KEY_')

bot = telebot.TeleBot(APY_KEY)

COUNTRYS = ['–ê—Ä–º–µ–Ω–∏—è', '–ì—Ä—É–∑–∏—è', '–°–µ—Ä–±–∏—è', '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', '–ë–µ–ª–∞—Ä—É—Å—å', '–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω']

Person_Arminia = '—Ç—É—Ç –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª –¥–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º'
Individual_ent_Armenia = '—Ç—É—Ç –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª –¥–æ–∫'
Person_Georgia = '—Ç—É—Ç –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª –¥–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º'
Individual_ent_Georgia = '—Ç—É—Ç –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª –¥–æ–∫'
Person_Turkey = '—Ç—É—Ç –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª –¥–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º'
Individual_ent_Turkey = '—Ç—É—Ç –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª –¥–æ–∫'
Person_Kazahstan = '—Ç—É—Ç –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª –¥–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º'
Individual_ent_Kazahstan = '—Ç—É—Ç –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª –¥–æ–∫'
Person_Kyrgyzstan = '—Ç—É—Ç –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª –¥–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º'
Individual_ent_Kyrgyzstan = '—Ç—É—Ç –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª –¥–æ–∫'
Person_Serbia = '—Ç—É—Ç –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª –¥–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º'
Individual_ent_Serbia = '—Ç—É—Ç –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª –¥–æ–∫'
DESCRIPTION = '–¢—É—Ç –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ. –î–ª—è –†–æ—Å—Å–∏–∏ —Ä–∞—Å—á–µ—Ç—ã –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –¥–ª—è —Ä–µ–∑–∏–µ–Ω—Ç–æ–≤, —É—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–æ –¢–ö –†–§'

def calculate_tax_2025(number):
    number = Decimal(str(number))

    if int(number*Decimal('12')) <= 2400000:
        sallary_per_month = number - number*Decimal('0.13')
        return sallary_per_month
    elif 2400000 < int(number*Decimal('12')) <= 5000000:
        sallary_per_year = number*Decimal('12') - (Decimal('312000') - (number - Decimal('2400000'))*Decimal('0.15'))
        sallary_per_month = int(sallary_per_year / Decimal('12'))
        return sallary_per_month
    elif 5000000 < int(number*Decimal('12')) <= 20000000:
        sallary_per_year = number*Decimal('12') - (Decimal('702000') - (number - Decimal('5000000'))*Decimal('0.18'))
        sallary_per_month = int(sallary_per_year / Decimal('12'))
        return sallary_per_month
    elif 20000000 < int(number*Decimal('12')) <= 50000000:
        sallary_per_year = number*Decimal('12') - (Decimal('3402000') - (number - Decimal('20000000'))*Decimal('0.20'))
        sallary_per_month = int(sallary_per_year / Decimal('12'))
        return sallary_per_month
    else:
        sallary_per_year = number*Decimal('12') - (Decimal('9402000') - (number - Decimal('50000000'))*Decimal('0.22'))
        sallary_per_month = int(sallary_per_year / Decimal('12'))
        return sallary_per_month



@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ß—Ç–æ —è —É–º–µ—é")
    btn2 = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É")
    btn3 = types.KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    markup.add(btn1, btn2, btn3)
    msg_2 = bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø –Ω–∞–ª–æ–≥–æ–≤—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ–±—Ä–∞–Ω–Ω—ã–π –¥–ª—è ETG(–û—Å—Ç—Ä–æ–≤–æ–∫)".format(message.from_user), reply_markup=markup)
    bot.register_next_step_handler(msg_2, func)


@bot.message_handler(content_types=['text'])
def func(message):
    if (message.text == "üëã –ß—Ç–æ —è —É–º–µ—é"):
        bot.send_message(message.chat.id, text={DESCRIPTION})
    elif (message.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
        markup.add(back)
        bot.send_message(message.chat.id, text="–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, —á–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π - —Ç–µ–º –ª—É—á—à–µ –æ—Ç–≤–µ—Ç", reply_markup=markup)
        bot.register_next_step_handler(message, ask_question)
    elif (message.text == "–í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ì—Ä—É–∑–∏—è")
        btn2 = types.KeyboardButton("–ê—Ä–º–µ–Ω–∏—è")
        btn3 = types.KeyboardButton("–°–µ—Ä–±–∏—è")
        btn4 = types.KeyboardButton("–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω")
        btn5 = types.KeyboardButton("–¢—É—Ä—Ü–∏—è")
        btn6 = types.KeyboardButton("–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω")
        btn7 = types.KeyboardButton("–†–æ—Å—Å–∏—è")
        back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
        markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, back)
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É", reply_markup=markup)

    elif (message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("üëã –ß—Ç–æ —è —É–º–µ—é")
        button2 = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É")
        button_3 = types.KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        markup.add(button1, button2, button_3)
        bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)

    elif (message.text in COUNTRYS):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        bt = types.KeyboardButton("–ö–∞–∫ —Ñ–∏–∑–ª–∏—Ü–æ")
        bt_1 = types.KeyboardButton("–ö–∞–∫ –ò–ü")
        bt_2 = types.KeyboardButton("–≤ –º–µ–Ω—é")
        markup.add(bt, bt_1, bt_2)
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", reply_markup=markup)

    elif (message.text == "–†–æ—Å—Å–∏—è"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        b = types.KeyboardButton("–†–∞—Å—Å—á–µ—Ç –ø–æ —à–∫–∞–ª–µ 2025")
        b_1 = types.KeyboardButton("–≤ –º–µ–Ω—é")
        markup.add(b, b_1)
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å", reply_markup=markup)
    
    elif (message.text == "–†–∞—Å—Å—á–µ—Ç –ø–æ —à–∫–∞–ª–µ 2025"):
        input_salary_gross(message)

    elif (message.text == '–≤ –º–µ–Ω—é'):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("üëã –ß—Ç–æ —è —É–º–µ—é")
        button2 = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É")
        button3 = types.KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        markup.add(button1, button2, button3)
        bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)

    elif (message.text == '–ö–∞–∫ —Ñ–∏–∑–ª–∏—Ü–æ' and '–ê—Ä–º–µ–Ω–∏—è'):
        bot.send_message(message.chat.id, text= {Person_Arminia})
    elif (message.text == '–ö–∞–∫ –ò–ü' and '–ê—Ä–º–µ–Ω–∏—è'):
        bot.send_message(message.chat.id, text= {Individual_ent_Armenia})
    
    elif (message.text == '–ö–∞–∫ —Ñ–∏–∑–ª–∏—Ü–æ' and '–ì—Ä—É–∑–∏—è'):
        bot.send_message(message.chat.id, text= {Person_Georgia})
    elif (message.text == '–ö–∞–∫ –ò–ü' and '–ì—Ä—É–∑–∏—è'):
        bot.send_message(message.chat.id, text= {Individual_ent_Georgia})
    
    elif (message.text == '–ö–∞–∫ —Ñ–∏–∑–ª–∏—Ü–æ' and '–¢—É—Ä—Ü–∏—è'):
        bot.send_message(message.chat.id, text= {Person_Turkey})
    elif (message.text == '–ö–∞–∫ –ò–ü' and '–ë–µ–ª–∞—Ä—É—Å—å'):
        bot.send_message(message.chat.id, text= {Individual_ent_Turkey})
    
    elif (message.text == '–ö–∞–∫ —Ñ–∏–∑–ª–∏—Ü–æ' and '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω'):
        bot.send_message(message.chat.id, text= {Person_Kazahstan})
    elif (message.text == '–ö–∞–∫ –ò–ü' and '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω'):
        bot.send_message(message.chat.id, text= {Individual_ent_Kazahstan})
    
    elif (message.text == '–ö–∞–∫ —Ñ–∏–∑–ª–∏—Ü–æ' and '–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω'):
        bot.send_message(message.chat.id, text= {Person_Kyrgyzstan})
    elif (message.text == '–ö–∞–∫ –ò–ü' and '–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω'):
        bot.send_message(message.chat.id, text= {Individual_ent_Kyrgyzstan})
    
    elif (message.text == '–ö–∞–∫ —Ñ–∏–∑–ª–∏—Ü–æ' and '–°–µ—Ä–±–∏—è'):
        bot.send_message(message.chat.id, text= {Person_Serbia})
    elif (message.text == '–ö–∞–∫ –ò–ü' and '–°–µ—Ä–±–∏—è'):
        bot.send_message(message.chat.id, text= {Individual_ent_Serbia})


def input_salary_gross(message):
    logging.info("–ø–µ—Ä–µ—Ö–æ–¥ –≤ input_sallary_gross")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.text == '–†–∞—Å—Å—á–µ—Ç –ø–æ —à–∫–∞–ª–µ 2025':
        bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏ —Å–≤–æ—é –∑–ø —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤ –∑–∞ 1 –º–µ—Å—è—Ü, —Å—É–º–º–∞ –≤ –≥—Ä–æ—Å—Å")
        bot.register_next_step_handler(message, calculate_taxes_progress_scale)
    else:
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å",
                         reply_markup=markup)


def calculate_taxes_progress_scale(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.text == '–†–∞—Å—Å—á–µ—Ç –ø–æ —à–∫–∞–ª–µ 2025':
        bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏ —Å–≤–æ—é –∑–ø —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤ –∑–∞ 1 –º–µ—Å—è—Ü, —Å—É–º–º–∞ –≤ –≥—Ä–æ—Å—Å")
        bot.register_next_step_handler(message, calculate_taxes_progress_scale)
    elif message.text == '–≤ –º–µ–Ω—é':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("üëã –ß—Ç–æ —è —É–º–µ—é")
        button2 = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É")
        button3 = types.KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        markup.add(button1, button2, button3)
        bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
    else:
        try:
            number = int(message.text)
            logging.info("message into int")
            bot.send_message(message.chat.id, text=f'''–ø—Ä–∏–≤–µ—Ç, —Ç–≤–æ—è –∑–ø –ø–æ—Å–ª–µ –Ω–∞–ª–æ–≥–æ–≤ (–≤ –º–µ—Å—è—Ü):
                            {calculate_tax_2025(number)}''', reply_markup=markup)
            # osh: –º–Ω–µ –∫–∞–∂ –º–æ–∂–Ω–æ —ç—Ç–æ —É–±—Ä–∞—Ç—å –∏ —Ç–∞–∫ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –≤ –º–µ–Ω—é –Ω–∞–¥–æ —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å
            # bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ",
            #                  reply_markup=markup)
            bot.register_next_step_handler(message, calculate_taxes_progress_scale)
            
        except (TypeError, ValueError):
            logging.info("type error message not int")
            msg = bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            bot.register_next_step_handler(msg, calculate_taxes_progress_scale)


def ask_question(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    question = message.text
    if question != '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        try:
            data = {'query': question}
            response = requests.post('http://llm:5005/llm_query', json=data, headers={'Content-Type': 'application/json'})
            logging.info(f"response {response.json()}")
        except Exception:
            response = '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é :('
            logging.error(f'Unsuccessful request: {response}')
        bot.send_message(message.chat.id, text=response.json()['response'], reply_markup=markup)
        msg = bot.send_message(message.chat.id, 
                               '–ú–æ–∂–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π. –ù–∞–∂–º–∏ "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é" —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è')
        bot.register_next_step_handler(msg, ask_question)
    else:
        func(message)


if __name__ == '__main__':

    bot.polling(none_stop=True)
    logging.info("–±–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª")